# For localhost:
#   ansible-playbook -i localhost, -c local install_neovim.yml --ask-become-pass
# Another option for localhost is to use a localhost_inventory.yml
#   ansible-playbook -i inventory_local.yml install_neovim.yml --ask-become-pass
#
# For networked machines (using inventory_net.yml)
#   ansible-playbook -i inventory_net.yml install_neovim.yml --ask-become-pass

# Note:
#   It is not necessary to have --ask-become-pass if the user does not need password to become root.
#
---
- name: Install Neovim on Linux
  hosts: all
  become: true
  vars:
    nvim_url: "https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"
    nvim_temp_file: "/tmp/nvim-linux64.tar.gz"
    nvim_install_path: "/opt/nvim"
    nvim_bin_path: "/opt/nvim-linux64/bin"

  tasks:
    - name: Ensure Python dependencies are installed
      ansible.builtin.apt:
        name:
          - python3-requests
          - python3-urllib3
          - ca-certificates
        state: present

    - name: Download Neovim tarball
      ansible.builtin.get_url:
        url: "{{ nvim_url }}"
        dest: "{{ nvim_temp_file }}"
        mode: "0644"
      ignore_errors: true
      register: download_result

    - name: Fallback to curl if get_url fails
      ansible.builtin.command: >
        curl -L -o "{{ nvim_temp_file }}" "{{ nvim_url }}"
      when: download_result.failed
      args:
        creates: "{{ nvim_temp_file }}"

    - name: Remove existing Neovim installation
      ansible.builtin.file:
        path: "{{ nvim_install_path }}"
        state: absent

    - name: Extract Neovim tarball to /opt
      ansible.builtin.unarchive:
        src: "{{ nvim_temp_file }}"
        dest: "/opt"
        remote_src: yes

    - name: Ensure Neovim binary is available
      ansible.builtin.stat:
        path: "{{ nvim_bin_path }}/nvim"
      register: nvim_binary

    - name: Fail if Neovim binary is not found
      ansible.builtin.fail:
        msg: "Neovim installation failed. Binary not found at {{ nvim_bin_path }}/nvim."
      when: not nvim_binary.stat.exists

    - name: Clean up temporary files
      ansible.builtin.file:
        path: "{{ nvim_temp_file }}"
        state: absent

    - name: Verify Neovim installation
      ansible.builtin.command: "{{ nvim_bin_path }}/nvim --version"
      register: nvim_version
      changed_when: false

    - name: Display installed Neovim version
      ansible.builtin.debug:
        msg: "Neovim installed successfully: {{ nvim_version.stdout }}"

    # -------------------------------------------------
    # LazyVim Installation
    # -------------------------------------------------

    - name: Clone LazyVim starter configuration
      ansible.builtin.git:
        repo: "https://github.com/LazyVim/starter"
        dest: "~/.config/nvim" # adjust if you don't want it in root's home
        version: "HEAD"
        force: yes
      become: false # run as the local user, not root
      when: nvim_binary.stat.exists

    - name: Remove .git folder from LazyVim configuration
      ansible.builtin.file:
        path: "~/.config/nvim/.git"
        state: absent
      become: false
      when: nvim_binary.stat.exists
